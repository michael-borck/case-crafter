import { ContentItem } from '../components/content/ContentLibrary';

export type ExportFormat = 'pdf' | 'word' | 'html' | 'markdown';

export interface ExportOptions {
  includeMetadata: boolean;
  includeTableOfContents: boolean;
  includePageNumbers: boolean;
  includeHeaderFooter: boolean;
  fontSize: number;
  fontFamily: string;
  margins: { top: number; right: number; bottom: number; left: number };
  pageSize: string;
  orientation: string;
  template: string;
  includeImages: boolean;
  includeCharts: boolean;
  watermark: string;
  customStyles: string;
  filename: string;
}

export interface ExportResult {
  url: string;
  filename: string;
  mimeType: string;
}

// PDF Export using jsPDF
export async function exportToPDF(contentItem: ContentItem, options: ExportOptions): Promise<ExportResult> {
  // Dynamically import jsPDF to reduce bundle size
  const { jsPDF } = await import('jspdf');
  
  const doc = new jsPDF({
    orientation: options.orientation as 'portrait' | 'landscape',
    unit: 'mm',
    format: options.pageSize.toLowerCase(),
  });

  // Set font
  doc.setFont('helvetica');
  doc.setFontSize(options.fontSize);

  let yPosition = options.margins.top;
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  const contentWidth = pageWidth - options.margins.left - options.margins.right;

  // Add metadata if requested
  if (options.includeMetadata) {
    doc.setProperties({
      title: contentItem.title,
      subject: contentItem.description,
      author: 'Case Crafter',
      creator: 'Case Crafter Export System',
      keywords: contentItem.tags.join(', '),
    });
  }

  // Add title
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  const titleLines = doc.splitTextToSize(contentItem.title, contentWidth);
  doc.text(titleLines, options.margins.left, yPosition);
  yPosition += titleLines.length * 10 + 10;

  // Add metadata section
  if (options.includeMetadata) {
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    
    const metadataText = [
      `Created: ${contentItem.metadata.createdAt.toLocaleDateString()}`,
      `Updated: ${contentItem.metadata.updatedAt.toLocaleDateString()}`,
      `Word Count: ${contentItem.wordCount}`,
      `Tags: ${contentItem.tags.join(', ')}`,
    ];

    metadataText.forEach(text => {
      doc.text(text, options.margins.left, yPosition);
      yPosition += 8;
    });
    yPosition += 10;
  }

  // Add table of contents if requested
  if (options.includeTableOfContents) {
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text('Table of Contents', options.margins.left, yPosition);
    yPosition += 15;

    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    
    // Extract sections from content
    const sections = extractSections(contentItem.content);
    sections.forEach((section, index) => {
      doc.text(`${index + 1}. ${section}`, options.margins.left + 5, yPosition);
      yPosition += 8;
    });
    yPosition += 15;
  }

  // Add main content
  doc.setFontSize(options.fontSize);
  doc.setFont('helvetica', 'normal');
  
  const contentLines = doc.splitTextToSize(contentItem.content, contentWidth);
  
  contentLines.forEach((line: string) => {
    // Check if we need a new page
    if (yPosition > pageHeight - options.margins.bottom - 20) {
      doc.addPage();
      yPosition = options.margins.top;
    }
    
    doc.text(line, options.margins.left, yPosition);
    yPosition += 6;
  });

  // Add page numbers if requested
  if (options.includePageNumbers) {
    const pageCount = doc.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(10);
      doc.text(
        `Page ${i} of ${pageCount}`,
        pageWidth - options.margins.right - 20,
        pageHeight - 10
      );
    }
  }

  // Add header/footer if requested
  if (options.includeHeaderFooter) {
    const pageCount = doc.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(10);
      
      // Header
      doc.text(contentItem.title, options.margins.left, 15);
      
      // Footer
      doc.text(
        'Generated by Case Crafter',
        options.margins.left,
        pageHeight - 10
      );
    }
  }

  // Add watermark if provided
  if (options.watermark) {
    const pageCount = doc.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(50);
      doc.setTextColor(200, 200, 200);
      doc.text(
        options.watermark,
        pageWidth / 2,
        pageHeight / 2,
        { angle: 45, align: 'center' }
      );
    }
  }

  const pdfBlob = doc.output('blob');
  const url = URL.createObjectURL(pdfBlob);
  
  return {
    url,
    filename: `${options.filename}.pdf`,
    mimeType: 'application/pdf',
  };
}

// Word Export using docx
export async function exportToWord(contentItem: ContentItem, options: ExportOptions): Promise<ExportResult> {
  // Dynamically import docx to reduce bundle size
  const { Document, Packer, Paragraph, TextRun, HeadingLevel, Header, Footer } = await import('docx');

  const children: any[] = [];

  // Add title
  children.push(
    new Paragraph({
      children: [
        new TextRun({
          text: contentItem.title,
          bold: true,
          size: 32,
        }),
      ],
      heading: HeadingLevel.TITLE,
    })
  );

  // Add metadata if requested
  if (options.includeMetadata) {
    children.push(
      new Paragraph({
        children: [
          new TextRun({
            text: `Created: ${contentItem.metadata.createdAt.toLocaleDateString()}`,
          }),
        ],
      }),
      new Paragraph({
        children: [
          new TextRun({
            text: `Updated: ${contentItem.metadata.updatedAt.toLocaleDateString()}`,
          }),
        ],
      }),
      new Paragraph({
        children: [
          new TextRun({
            text: `Word Count: ${contentItem.wordCount}`,
          }),
        ],
      }),
      new Paragraph({
        children: [
          new TextRun({
            text: `Tags: ${contentItem.tags.join(', ')}`,
          }),
        ],
      }),
      new Paragraph({ children: [] }) // Empty paragraph for spacing
    );
  }

  // Add table of contents placeholder if requested
  if (options.includeTableOfContents) {
    children.push(
      new Paragraph({
        children: [
          new TextRun({
            text: 'Table of Contents',
            bold: true,
            size: 24,
          }),
        ],
        heading: HeadingLevel.HEADING_1,
      }),
      new Paragraph({
        children: [
          new TextRun({
            text: '(Table of contents will be generated when opened in Microsoft Word)',
            italics: true,
          }),
        ],
      }),
      new Paragraph({ children: [] })
    );
  }

  // Add main content
  const contentParagraphs = contentItem.content.split('\n\n');
  contentParagraphs.forEach(paragraphText => {
    if (paragraphText.trim()) {
      children.push(
        new Paragraph({
          children: [
            new TextRun({
              text: paragraphText.trim(),
              size: options.fontSize * 2, // Word uses half-points
            }),
          ],
        })
      );
    }
  });

  const doc = new Document({
    properties: {
      title: contentItem.title,
      subject: contentItem.description,
      creator: 'Case Crafter',
      keywords: contentItem.tags.join(', '),
    },
    sections: [
      {
        properties: {
          page: {
            margin: {
              top: options.margins.top * 56.7, // Convert mm to twips
              right: options.margins.right * 56.7,
              bottom: options.margins.bottom * 56.7,
              left: options.margins.left * 56.7,
            },
          },
        },
        ...(options.includeHeaderFooter ? {
          headers: {
            default: new Header({
              children: [
                new Paragraph({
                  children: [
                    new TextRun({
                      text: contentItem.title,
                      size: 20,
                    }),
                  ],
                }),
              ],
            }),
          },
          footers: {
            default: new Footer({
              children: [
                new Paragraph({
                  children: [
                    new TextRun({
                      text: 'Generated by Case Crafter',
                      size: 16,
                    }),
                  ],
                }),
              ],
            }),
          },
        } : {}),
        children,
      },
    ],
  });

  const buffer = await Packer.toBuffer(doc);
  const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });
  const url = URL.createObjectURL(blob);

  return {
    url,
    filename: `${options.filename}.docx`,
    mimeType: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
  };
}

// HTML Export
export async function exportToHTML(contentItem: ContentItem, options: ExportOptions): Promise<ExportResult> {
  let css = `
    body {
      font-family: ${options.fontFamily}, Arial, sans-serif;
      font-size: ${options.fontSize}px;
      line-height: 1.6;
      margin: ${options.margins.top}mm ${options.margins.right}mm ${options.margins.bottom}mm ${options.margins.left}mm;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
    }
    
    h1 {
      color: #333;
      border-bottom: 2px solid #e0e0e0;
      padding-bottom: 10px;
      margin-bottom: 20px;
    }
    
    .metadata {
      background-color: #f5f5f5;
      padding: 15px;
      border-radius: 5px;
      margin-bottom: 20px;
      font-size: 0.9em;
    }
    
    .toc {
      background-color: #f9f9f9;
      padding: 15px;
      border-left: 4px solid #2196f3;
      margin-bottom: 20px;
    }
    
    .toc h2 {
      margin-top: 0;
      color: #2196f3;
    }
    
    .toc ul {
      margin: 0;
      padding-left: 20px;
    }
    
    .content {
      text-align: justify;
    }
    
    .watermark {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%) rotate(-45deg);
      font-size: 72px;
      color: rgba(200, 200, 200, 0.3);
      z-index: -1;
      pointer-events: none;
    }
    
    @media print {
      body {
        margin: 0;
        padding: 20px;
      }
      
      .no-print {
        display: none;
      }
      
      .page-break {
        page-break-before: always;
      }
    }
  `;

  // Apply custom styles if provided
  if (options.customStyles) {
    css += '\n\n/* Custom Styles */\n' + options.customStyles;
  }

  // Apply template-specific styles
  css += getTemplateStyles(options.template);

  let html = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${contentItem.title}</title>
    <meta name="description" content="${contentItem.description}">
    <meta name="keywords" content="${contentItem.tags.join(', ')}">
    <meta name="author" content="Case Crafter">
    <style>${css}</style>
</head>
<body>`;

  // Add watermark if provided
  if (options.watermark) {
    html += `<div class="watermark">${options.watermark}</div>`;
  }

  // Add title
  html += `<h1>${contentItem.title}</h1>`;

  // Add metadata if requested
  if (options.includeMetadata) {
    html += `
    <div class="metadata">
        <h3>Document Information</h3>
        <p><strong>Created:</strong> ${contentItem.metadata.createdAt.toLocaleDateString()}</p>
        <p><strong>Updated:</strong> ${contentItem.metadata.updatedAt.toLocaleDateString()}</p>
        <p><strong>Word Count:</strong> ${contentItem.wordCount}</p>
        <p><strong>Tags:</strong> ${contentItem.tags.join(', ')}</p>
    </div>`;
  }

  // Add table of contents if requested
  if (options.includeTableOfContents) {
    const sections = extractSections(contentItem.content);
    if (sections.length > 0) {
      html += `
      <div class="toc">
          <h2>Table of Contents</h2>
          <ul>`;
      
      sections.forEach((section, index) => {
        const sectionId = `section-${index + 1}`;
        html += `<li><a href="#${sectionId}">${section}</a></li>`;
      });
      
      html += `
          </ul>
      </div>`;
    }
  }

  // Add main content
  html += `<div class="content">`;
  
  // Convert markdown-like content to HTML
  const htmlContent = convertToHTML(contentItem.content);
  html += htmlContent;
  
  html += `</div>`;

  // Add footer if requested
  if (options.includeHeaderFooter) {
    html += `
    <footer style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #e0e0e0; text-align: center; font-size: 0.9em; color: #666;">
        Generated by Case Crafter
    </footer>`;
  }

  html += `
</body>
</html>`;

  const blob = new Blob([html], { type: 'text/html' });
  const url = URL.createObjectURL(blob);

  return {
    url,
    filename: `${options.filename}.html`,
    mimeType: 'text/html',
  };
}

// Markdown Export
export async function exportToMarkdown(contentItem: ContentItem, options: ExportOptions): Promise<ExportResult> {
  let markdown = '';

  // Add title
  markdown += `# ${contentItem.title}\n\n`;

  // Add metadata if requested
  if (options.includeMetadata) {
    markdown += `## Document Information\n\n`;
    markdown += `- **Created:** ${contentItem.metadata.createdAt.toLocaleDateString()}\n`;
    markdown += `- **Updated:** ${contentItem.metadata.updatedAt.toLocaleDateString()}\n`;
    markdown += `- **Word Count:** ${contentItem.wordCount}\n`;
    markdown += `- **Tags:** ${contentItem.tags.join(', ')}\n\n`;
  }

  // Add table of contents if requested
  if (options.includeTableOfContents) {
    const sections = extractSections(contentItem.content);
    if (sections.length > 0) {
      markdown += `## Table of Contents\n\n`;
      sections.forEach((section, index) => {
        const anchor = section.toLowerCase().replace(/[^a-z0-9]+/g, '-');
        markdown += `${index + 1}. [${section}](#${anchor})\n`;
      });
      markdown += '\n';
    }
  }

  // Add main content
  markdown += contentItem.content;

  // Add footer if requested
  if (options.includeHeaderFooter) {
    markdown += `\n\n---\n\n*Generated by Case Crafter*\n`;
  }

  const blob = new Blob([markdown], { type: 'text/markdown' });
  const url = URL.createObjectURL(blob);

  return {
    url,
    filename: `${options.filename}.md`,
    mimeType: 'text/markdown',
  };
}

// Helper functions

function extractSections(content: string): string[] {
  const lines = content.split('\n');
  const sections: string[] = [];
  
  lines.forEach(line => {
    const trimmed = line.trim();
    // Look for markdown headers or bold text that could be section titles
    if (trimmed.startsWith('#') || (trimmed.startsWith('**') && trimmed.endsWith('**'))) {
      let sectionTitle = trimmed;
      if (sectionTitle.startsWith('#')) {
        sectionTitle = sectionTitle.replace(/^#+\s*/, '');
      } else {
        sectionTitle = sectionTitle.replace(/^\*\*|\*\*$/g, '');
      }
      if (sectionTitle.length > 0 && sectionTitle.length < 100) {
        sections.push(sectionTitle);
      }
    }
  });
  
  return sections;
}

function convertToHTML(content: string): string {
  let html = content;
  
  // Convert markdown-style headers
  html = html.replace(/^### (.*$)/gim, '<h3>$1</h3>');
  html = html.replace(/^## (.*$)/gim, '<h2>$1</h2>');
  html = html.replace(/^# (.*$)/gim, '<h1>$1</h1>');
  
  // Convert bold and italic text
  html = html.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
  html = html.replace(/\*(.*?)\*/g, '<em>$1</em>');
  
  // Convert line breaks to paragraphs
  const paragraphs = html.split('\n\n');
  html = paragraphs.map(p => {
    const trimmed = p.trim();
    if (trimmed && !trimmed.startsWith('<h') && !trimmed.startsWith('<div')) {
      return `<p>${trimmed.replace(/\n/g, '<br>')}</p>`;
    }
    return trimmed;
  }).join('\n\n');
  
  return html;
}

function getTemplateStyles(template: string): string {
  switch (template) {
    case 'academic':
      return `
        /* Academic Template */
        body { font-family: 'Times New Roman', serif; }
        h1, h2, h3 { font-family: 'Times New Roman', serif; }
        .content { text-align: justify; }
      `;
    case 'business':
      return `
        /* Business Template */
        body { font-family: 'Arial', sans-serif; }
        h1 { color: #1976d2; }
        h2, h3 { color: #424242; }
        .metadata { border-left: 4px solid #1976d2; }
      `;
    case 'modern':
      return `
        /* Modern Template */
        body { font-family: 'Roboto', sans-serif; }
        h1 { 
          background: linear-gradient(45deg, #2196f3, #21cbf3);
          -webkit-background-clip: text;
          -webkit-text-fill-color: transparent;
          background-clip: text;
        }
        .metadata { 
          background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
          border-radius: 10px;
        }
      `;
    case 'minimal':
    default:
      return `
        /* Minimal Template */
        body { font-family: 'Helvetica', sans-serif; }
        h1, h2, h3 { color: #333; font-weight: 300; }
      `;
  }
}